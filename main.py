import Snitch
import csv
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

"""
Main Class -> Uses the Snitch.py file to create a snitch and Field
which then will be used to display positional data within the 
3D graph generated by matplotlib. 

:type Snitch goldenSnitch: Snitch used in program
:type Field quidditchMatch: Field being manipulated 

:parameter XBOUND,YBOUND,ZBOUND: Bounds of field 
:parameter TIMESRAN: Total iterations of fly method called 
"""
goldenSnitch = Snitch.Snitch(0, 0, 50)

XBOUND, YBOUND, ZBOUND = 1000, 1000, 500
quidditchMatch = Snitch.Field(goldenSnitch,
                              XBOUND, YBOUND, ZBOUND)
TIMESRAN: int = 10

"""
For loop which calls the method fly() in order to 
create arrays of x, y, z positions that will 
be transferred into csv file 
"""
for i in range(TIMESRAN):
    quidditchMatch.fly()

"""
This section creates a csv file named 'positionData.csv' 
and writes it in the format of ->

' x_position  y_position  z_position '
'      #          #            # '
'      .          .            . '
'      .          .            . '
'      #          #            # ' 

"""
with open('positionData.csv', 'w', newline='') as f:
    fieldnames = ["x_position",
                  "y_position",
                  "z_position"]
    writer = csv.DictWriter(f, fieldnames=fieldnames)
    writer.writeheader()

    for i in range(quidditchMatch.xArr.__len__()):
        writer.writerow({
            "x_position": quidditchMatch.xArr[i],
            "y_position": quidditchMatch.yArr[i],
            "z_position": quidditchMatch.zArr[i]
        })

"""
Limits of the displayed figure are set here 
After setting up the subplot (ax), the bounds of the graph 
are also set as well by using the bounds instantiated 
at the start of the program. 
"""
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.set(xlim=(0, XBOUND), ylim=(0, YBOUND), zlim=(0, ZBOUND))

"""
After the data has been set in the csv file,
it is then read and defined into arrays x, y, z 
"""
data = pd.read_csv('positionData.csv')
x = data['x_position']
y = data['y_position']
z = data['z_position']

"""
Method animate_frame() -> This is the method used
to repeat within the FuncAnimation 
It sets the bounds on each iteration and clears the bound 
then it plots the [:index] position of each array 

:param index: Index iteration being taken from the array 
"""
def animate_frame(index):
    ax.clear()

    ax.plot3D(x[:index], y[:index], z[:index])
    ax.set(xlim=(0, XBOUND), ylim=(0, YBOUND), zlim=(0, ZBOUND))

"""
Method animate() -> Uses the matplotlib function FuncAnimation() 
to run through each individual point within the csv file 
and then animates it onto the 3D graph 

plt.gcf() -> Gets current figure 
animate_frame() -> Method to be called for each frame 
interval -> Milliseconds of updating the graph (Lower = Faster Animation) 
frames -> Total frames that will be ran through
repeat -> T/F if simulation stops at last point or restarts at last point 
"""
animate = FuncAnimation(plt.gcf(), animate_frame,
                    interval=1,
                    frames=len(quidditchMatch.xArr),
                    repeat=False)

'Displays the plot after given updates have ran'
plt.show()